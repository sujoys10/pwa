{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","container/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","React","App","console","log","getRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","isFailed","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","container_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b304fb46.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n      <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflow: 'scroll', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return(\r\n                <h1>oopss</h1>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n\r\n    // preventing rerender of the component\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Robofriends</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../action';\nimport Header from '../components/Header';\n\nclass App extends Component {\n  \n  componentDidMount(){\n    console.log(this.props);\n    this.props.getRobots();\n  }\n\n\n  render(){\n    const {searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    if(isPending){\n      return(\n        <h1>Loading</h1>\n      )\n    }else{\n      return (\n        <div className=\"App\"> \n          <Header />\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  console.log(state)\n  return{\n    searchField: state.searchRobots.searchField,\n    robots: state.getRobots.robots,\n    isPending: state.getRobots.isPending,\n    isFailed: state.getRobots.isFailed\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    getRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD,\r\n    GET_ROBOTS_PENDING,\r\n    GET_ROBOTS_SUCCESS,\r\n    GET_ROBOTS_FAILED    \r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: GET_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({ type: GET_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(err => dispatch({ type: GET_ROBOTS_FAILED, payload: err }));\r\n} ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'; \r\nexport const GET_ROBOTS_PENDING = 'GET_ROBOTS_PENDING';\r\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS';\r\nexport const GET_ROBOTS_FAILED = 'GET_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n    GET_ROBOTS_PENDING,\r\n    GET_ROBOTS_SUCCESS,\r\n    GET_ROBOTS_FAILED    \r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state= initialStateSearch, action) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return  Object.assign({},state, {searchField: action.payload})\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    isFailed: false\r\n}\r\n\r\nexport const getRobots = (state = initialStateRobots, action) =>  {\r\n    switch(action.type){\r\n        case GET_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case GET_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {isPending: false, robots: action.payload})\r\n        case GET_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {isFailed: true, error:action.payload})\r\n        default:\r\n            return state            \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, getRobots } from './reducer';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, getRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}